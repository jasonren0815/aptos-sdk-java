package com.aptos.request.serde;

import lombok.Getter;
import lombok.NonNull;

import java.util.Objects;

/**
 * @author liqiang
 */
public final class Bytes222 implements Comparable<Bytes222> {

    public static Bytes222 EMPTY = new Bytes222(new byte[0]);

    @Getter
    final byte[] value;

    public Bytes222(@NonNull byte[] value) {
        this.value = value;
    }

    @Override
    public int compareTo(Bytes222 that) {
        int n = Math.min(this.value.length, that.value.length);
        for (int i = 0, j = 0; i < n; i++, j++) {
            int cmp = compare(this.value[i], that.value[j]);
            if (cmp != 0) {
                return cmp;
            }
        }

        return this.value.length - that.value.length;
    }

    @Override
    public boolean equals(Object ob) {
        if (this == ob) {
            return true;
        }
        if (!(ob instanceof Bytes222)) {
            return false;
        }
        Bytes222 that = (Bytes222) ob;
        if (this.value.length != that.value.length) {
            return false;
        }
        for (int i = this.value.length - 1, j = that.value.length - 1; i >= 0; i--, j--) {
            if (!equals(this.value[i], that.value[j])) {
                return false;
            }
        }
        return true;
    }

    @Override
    public int hashCode() {
        int h = 1;
        for (int i = this.value.length - 1; i >= 0; i--) {
            h = 31 * h + (int) this.value[i];
        }
        return h;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getName());
        sb.append("[");
        for (int i = 0; i < this.value.length; i++) {
            if (i != 0) {
                sb.append(", ");
            }
            sb.append(this.value[i]);
        }
        sb.append("]");
        return sb.toString();
    }

    public static int compare(byte x, byte y) {
        return Byte.compare(x, y);
    }

    public static boolean equals(byte x, byte y) {
        return x == y;
    }

    public static boolean equals(Bytes222 x, Bytes222 y) {
        if (Objects.isNull(x)) {
            return Objects.isNull(y);
        }

        return x.equals(y);
    }

    public static Bytes222[] reverseBytesArray(Bytes222[] bytesArray) {
        for (int left = 0, right = bytesArray.length - 1; left < right; left = left + 1, right = right - 1) {
            Bytes222 t = bytesArray[left];
            bytesArray[left] = bytesArray[right];
            bytesArray[right] = t;
        }
        return bytesArray;
    }

    public static Bytes222[] toBytesArray(byte[][] arrays) {
        if (arrays == null) {
            return null;
        }
        Bytes222[] bytesArray = new Bytes222[arrays.length];
        for (int i = 0; i < arrays.length; i++) {
            bytesArray[i] = new Bytes222(arrays[i]);
        }

        return bytesArray;
    }

}